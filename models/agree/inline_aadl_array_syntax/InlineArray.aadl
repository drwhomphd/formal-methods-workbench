package InlineArray
public 
   with Base_Types;
   with Data_Model;
   
   
data my_data
end my_data;


data implementation my_data.impl
	subcomponents
		contents: data Base_Types::Integer {Data_Model::Data_Representation => Array;};
		number: data Base_Types::Integer;
end my_data.impl;

   
system A
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
		OutputArray1: out data port Base_Types::Integer {Data_Model::Data_Representation => Array;};

		OutputArray2: out data port Base_Types::Integer {
			Data_Model::Data_Representation => Array;
			Data_Model::Dimension => (5);	
		};
		OutputArray3: out data port Base_Types::Integer {
			Data_Model::Data_Representation => Array;
			Data_Model::Dimension => (Consts::ArrayLength);	
		};
		OutputArray4: out data port my_data.impl;
			
	annex agree {** 
			
			
--		guarantee "Array1" : forall x in OutputArray1, x >= 0 or x < 0;
		guarantee "Array2" : forall y in OutputArray2, y >= 0 or y < 0;
		guarantee "Array3" : forall z in OutputArray3, z >= 0 or z < 0;
		guarantee "Array4" : OutputArray4.number >=0 or OutputArray4.number < 0;

	**};	
end A ; 

system top_level
	features
		Input: in data port Base_Types::Integer;
		Output: out data port Base_Types::Integer;
	annex agree {** 
	    
	  eq mode : int;
	**};	
end top_level;

system implementation top_level.Impl
	subcomponents
		A_sub : system A ;
		
	annex agree{**
	**};
	
end top_level.Impl;
	
end InlineArray;